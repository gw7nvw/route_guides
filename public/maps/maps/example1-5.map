# The annotated map file (sort of)
# Created by Pericles S. Nacionales for the MapServer tutorial
# 20050408
#
# MapServer map file uses the pound sign (#) to denote the start of a line
# comment--each line that needs to be commented has to be prepended with a "#".
#
# Map files begin with MAP keyword to signify the start of the map object.
# Well, the entire map file is THE map object.  Enclosed between MAP and END
# at the very bottom of this map file, are keyword/value pairs and other
# objects.
MAP
  IMAGETYPE      PNG
  EXTENT         1983997.883  5755000.451 1986003.227 5755802.116
  SIZE           400 300
  SHAPEPATH      "../data"
  IMAGECOLOR     255 255 255
PROJECTION
	"proj=tmerc"
	"lat_0=0"
	"lon_0=173"
	"k=0.9996"
	"x_0=1600000"
	"y_0=10000000"
	"ellps=GRS80"
	"towgs84=0,0,0,0,0,0,0"
	"units=m"
	"no_defs"
END

  # Layer objects are defined beneath the map object.  You need at least one
  # layer defined in your map file before you can display a map...  You can
  # define as many layers as you'd like although a limit is typically hard-coded
  # in map.h in the MapServer source.  The default limit is set at 100.  You'd
  # have to have a very specialized application to need more than 100 layers in
  # your application.
  #
  # Start of LAYER DEFINITIONS ---------------------------------------------
  LAYER # MODIS raster layer begins here
    NAME         topo
    DATA         "BF41_.png"
    STATUS       OFF
    TYPE         RASTER
    PROJECTION
	"proj=tmerc"
	"lat_0=0"
	"lon_0=173"
	"k=0.9996"
	"x_0=1600000"
	"y_0=10000000"
	"ellps=GRS80"
	"towgs84=0,0,0,0,0,0,0"
	"units=m"
	"no_defs"
    END
  END # MODIS raster layer ends here
  LAYER # States polygon layer begins here
    NAME         states
    DATA         urutawa
    STATUS       OFF
    TYPE         LINE

    PROJECTION
	"proj=longlat"
	"ellps=WGS84"
	"datum=WGS84"
	"no_defs"
    END
    # CLASSITEM defines the non-spatial attribute that you will be using to
    # separate a layer into classes.  This attribute will be in the DBF file
    # of your shapefile (it will be different for each data format).  In this
    # example the shapefile states_ugl has an associated database 
    # (states_ugl.dbf) that contains an attribute called "CLASS".  You will be
    # using two values in the CLASS attribute to separate the classes (also 
    # called themes) used in this layer--land and water.  CLASSITEM is used in 
    # association with the EXPRESSION parameter in the CLASS object.  See below.

    # The class object is defined within the layer object.  You can define as
    # many classes as you need (well, there are limits as with layers, but it's
    # senseless to define more than ten on a "normal" layer.  There are
    # situations, however, where you might have to do it.)
    CLASS
      NAME 'States'

      # There are styles in a class, just like there are classes in a layer,
      # just like there are layers in a map.  You can define multiple styles in
      # a class just as you can define multiple classes in a layer and multiple
      # layers in a map.
      STYLE
        COLOR      32 32 32
      END
    END
  END # States polygon layer ends here

  # In addition to vector data (shapefiles are vector data), MapServer supports
  # a host of raster formats.  In GIS world, one of the most common raster
  # formats is GeoTIFF, a TIFF image with geospatial headers.  MapServer also
  # supports JPEG, PNG, GIF, and other common formats.  Other raster formats
  # supported by MapServer include ESRI Arc/Info grid, HDF and HDF-EOS, NetCDF, 
  # Generic raster binaries, OGC Web Map Service (WMS) layers, etc.  Pretty much 
  # any raster format you can think of is probably supported, thanks to the
  # impressive Geospatial Data Abstraction Library (GDAL, pronounced "GOODALL"
  # or GOODLE?).  More information on GDAL is available at http://www.gdal.org.
  #
  # MapServer 4.x can read and display bitmapped (like GIFs), RGB/A (true
  # color), and multispectral (images with more than 3 bands, like raw LandSat
  # images) rasters.

  # End of LAYER DEFINITIONS -------------------------------

END # All map files must come to an end just as all other things must come to...
